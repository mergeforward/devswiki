## Python 快排入门

author: dameng

-----

## outline

- 快排算法介绍与分析
- python基础语法
- 快速排序的python实现

-----

## target

- 深入理解快速排序的设计思想
- 随手用python写快排

-----

## 快速排序的特点

- 相较简单的冒泡，选择排序性能有提升
- 算法设计思路简洁明了
- 时间复杂度有波动
- 递归实现
- 关注主元
- python实现非常简单

-----

## 快排原理

----

![](2020-03-15-21-44-05.png)

----

- 选取主元
- 将剩下的元素按大小二分类

----

![](2020-03-15-21-44-52.png)

----

分类后将小于主元的数组，主元，大于主元的数组 拼接成新的数组以待下一步的处理

----

![](2020-03-15-21-47-16.png)

----

继续对每次主元两侧的数据进行处理，如果主元一侧没有额外的数据，则停止该侧的处理过程

----

![](2020-03-15-21-48-55.png)

----

![](2020-03-15-21-49-19.png)

----

直至全部元素都被当作主元标记过

----

![](2020-03-15-21-51-38.png)

-----

## 算法复杂度分析

----

![](2020-03-15-22-14-38.png)

----

![](2020-03-15-22-35-31.png)

-----

## python 基础

----

### 函数定义

----

```python
def hello():
    print("hello")
```

----

### if...else 与 递归调用

----

```python
def fib(n):
    if n == 0: 
        return 0
    elif n == 1: 
        return 1
    else: 
        return fib(n-1)+fib(n-2)
```

----

### 数组的使用

----

```python
a = [1,2,3,4,5]
print(a[0:1])
print(a[2:-1])
```

----

### 数组的拼接

----

```python
a = [1,2]
b = []
c = [3,4]
print(a+b+c)
```

----

### 链表解析

----

```python
a = [1,2,3,4,5]
b = [e for e in a if e%2 ==0]
print(b)
```

-----

### python 实现快速排序

----

```python

def quick_sort(a):  
    if not a: return []  
    return quick_sort([x for x in a[1:] if x< a[0]]) + a[0:1] +  \
           quick_sort([x for x in a[1:] if x>=a[0]])  


if __name__ == "__main__":
    data = [10,16,8,12,15,6,3,9,5]
    result = quick_sort(data)
    print('before sort: ', data)
    print('after sort: ', result)

```

-----

## Thanks